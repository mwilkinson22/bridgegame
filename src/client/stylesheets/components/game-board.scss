@use "../variables/colours";
@use "../variables/layout";

@mixin SetCellColours($fill, $text) {
	.hexagon-svg path {
		fill: $fill;
	}
	&.clickable {
		path:hover {
			fill: lighten($fill, 3%);
		}
	}

	.hexagon-content svg {
		fill: $text;
	}

	color: $text;
}

.game-board-wrapper {
	max-width: 100%;
	display: flex;
	justify-content: center;

	.game-board-scroll-container {
		overflow: auto;

		.game-board {
			padding: 10px 30px;
			@include layout.HexagonalGrid(90px);
			.hexagon {
				&.clickable {
					cursor: pointer;
				}

				&.hidden {
					@include SetCellColours(#555, white);
					.hexagon-content {
						opacity: 0;
					}
				}

				&.startend {
					@include SetCellColours(#1a3860, white);
				}

				&.eliminator {
					@include SetCellColours(#333, #bbb);

					.eliminator-symbol {
						width: 40%;
						height: 40%;
						.eliminator-svg {
							height: 100%;
							width: 100%;
						}
					}
				}
				&.eliminator.clickable,
				&.eliminated-lie {
					@include SetCellColours(#6f144c, #fc0);
				}

				&.clicked-truth,
				&.revealed-truth {
					@include SetCellColours(colours.$right-answer-colour, white);
				}
				&.clicked-lie,
				&.revealed-lie {
					@include SetCellColours(colours.$wrong-answer-colour, white);
				}

				&.revealed-truth,
				&.revealed-lie {
					opacity: 0.4;
				}

				&.unknown-answer {
					@include SetCellColours(#c8e3f1, black);
				}

				&:not(.hidden):not(.eliminator) {
					.hexagon-content {
						opacity: 0;
						animation: fade-in 200ms forwards;
						animation-delay: 300ms;
					}
				}
			}

			path {
				transition: fill 400ms;
				rotate: 0deg;
			}
		}
	}
}

@keyframes reveal-cell {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}

@keyframes points-change {
	from {
		transform: scale(1.5);
	}
	to {
		transform: scale(1);
	}
}
